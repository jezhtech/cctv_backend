"""Initial DBs

Revision ID: 66a1db03ea6d
Revises: 
Create Date: 2025-08-21 15:00:56.814342

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '66a1db03ea6d'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cameras',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=False),
    sa.Column('port', sa.Integer(), nullable=False),
    sa.Column('path', sa.String(length=255), nullable=True),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('frame_rate', sa.Integer(), nullable=False),
    sa.Column('resolution_width', sa.Integer(), nullable=False),
    sa.Column('resolution_height', sa.Integer(), nullable=False),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('settings', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cameras_name'), 'cameras', ['name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('profile_images', sa.JSON(), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('employee_id', sa.String(length=50), nullable=True),
    sa.Column('position', sa.String(length=100), nullable=True),
    sa.Column('user_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('camera_streams',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('camera_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('started_at', sa.String(length=255), nullable=True),
    sa.Column('last_frame_at', sa.String(length=255), nullable=True),
    sa.Column('total_frames_processed', sa.Integer(), nullable=False),
    sa.Column('faces_detected', sa.Integer(), nullable=False),
    sa.Column('errors_count', sa.Integer(), nullable=False),
    sa.Column('fps', sa.Integer(), nullable=False),
    sa.Column('memory_usage_mb', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('face_detections',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('camera_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.String(length=255), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('face_bbox', sa.JSON(), nullable=False),
    sa.Column('landmarks', sa.JSON(), nullable=True),
    sa.Column('recognized_user_id', sa.UUID(), nullable=True),
    sa.Column('recognition_confidence', sa.Float(), nullable=True),
    sa.Column('face_image_url', sa.String(length=500), nullable=True),
    sa.Column('full_frame_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ),
    sa.ForeignKeyConstraint(['recognized_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('face_embeddings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('embedding', sa.Text(), nullable=False),
    sa.Column('face_image_url', sa.String(length=500), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('face_quality_score', sa.Float(), nullable=True),
    sa.Column('face_bbox', sa.JSON(), nullable=True),
    sa.Column('landmarks', sa.JSON(), nullable=True),
    sa.Column('source_image', sa.String(length=500), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('face_size', sa.JSON(), nullable=True),
    sa.Column('face_angle', sa.Float(), nullable=True),
    sa.Column('lighting_score', sa.Float(), nullable=True),
    sa.Column('blur_score', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('attendance',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('camera_id', sa.UUID(), nullable=False),
    sa.Column('check_in_time', sa.String(length=255), nullable=False),
    sa.Column('check_out_time', sa.String(length=255), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('face_embedding_id', sa.UUID(), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['camera_id'], ['cameras.id'], ),
    sa.ForeignKeyConstraint(['face_embedding_id'], ['face_embeddings.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('attendance')
    op.drop_table('face_embeddings')
    op.drop_table('face_detections')
    op.drop_table('camera_streams')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_cameras_name'), table_name='cameras')
    op.drop_table('cameras')
    # ### end Alembic commands ###
