services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: smart_attendance_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - smart-attendance-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smart-attendance-backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  celery:
    build: .
    container_name: celery_worker
    restart: always
    working_dir: /app
    command: celery -A app.core.celery_app:celery_app worker --loglevel=info --concurrency=1
    volumes:
      - ./app:/app/app
      - ./models:/app/models
      - ./app/core:/app/app/core
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/smart_attendance_service
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smart-attendance-backend

  flower:
    build: .
    container_name: flower_monitor
    restart: always
    working_dir: /app
    command: celery -A app.core.celery_app:celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/smart_attendance_service
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - celery
    networks:
      - smart-attendance-backend

volumes:
  postgres_data:
  redis_data:

networks:
  smart-attendance-backend:
    driver: bridge